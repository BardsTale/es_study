
- 오브젝트, 인스턴스
Built-in 오브젝트 : 이미 언어에 빌트인 되어있는 것.
오브젝트 : Built-in 오브젝트로 생성한 오브젝트
인스턴스 : new 연산자로 생성한 오브젝트

- Property key와 name 차이
name : String.
key :  String이나 Symbol. 빈 문자를 포함해서 사용가능.

- 함수와 메소드
ES6는 function, method에서 static method가 추가됨(class에서 사용)
Array.isArray() : 함수 사용법. '오브젝트.함수이름(대상값)'
Array.prototype.forEach() : 메소드 사용법, 프로토타입에 사용. '대상값.메소드(콜백함수)'  

- 변수 구분
전역 변수 : 의도는 좋으나 처리 속도가 떨어짐.
로컬 변수 : 빠르게 식별하고자 스코프라는 개념을 도입.

- var 키워드 문제.
전역 변수는 전역 오브젝트의 로컬 변수.
var 키워드를 작성하지 않으면 스코프 안에서 선언문을 찾지 못할 경우 글로벌 변수로 간주.
ES5에선 use strict를 사용 시 함수 안세어 var 키워드를 사용하지 않으면 에러.
ES6+에선 use strict가 디폴트 환경임(전체는 아님)

- 블록 스코프 유형
function : 같은 이름의 let 변수를 펑션 안팎에서 사용 가능하기 때문.
try-catch : try와 catch에서 각각의 블록 부여.
switch-case : switch문 자체가 블록. case나 default는 블록이 아님.

- let 변수 개요
let은 블록 스코프를 가진 변수. 변수가 선언된 블록이 변수의 스코프.
스코프 적용 기준 : 블록, 문, 표현식
let은 변수를 선언만 할 수 있음(초기값은 undefined). 그러나 이때 var와 다르게 사용할 수 없음.

- let과 var 차이
var은 별도의 스코프를 가지지 않음.(전체에서 1개) let은 매 선언 시마다 스코프를 가짐.

- let 변수와 this의 차이
전역 오브젝트에서 let 변수를 this로 참조 불가.
전역에서 let 변수는 블록이 없으므로 엔진이 가상의 블록 script를 만들고 이를 스코프로 사용. <script>안에서 사용.

- js 파일 다수 사용
모든 js파일은 전역의 변수를 공유함. let 또한 마찬가지임. var은 window지만 let도 전역 script에 들어감.
블럭이란 개념이 중요함.

- 호이스팅
ES5의 실행 콘텍스트 처리 순서.
1. 함수 선언문 설정.
2. 변수 이름 바인딩(값은 undefined로 처리).
3. 소스 코드 실행.

ES6 부터 등장한 let은 전역 환경에서 호이스팅을 통해 상단으로 올라가지 않음.
블록에서는 올라가 undefined가 할당되지만(즉 블럭을 엔진이 먼저 한 번 훑음.) 사용할 수는 없음. 즉 호이스팅 되지 않는 것과 같다.
위의 내용을 템퍼럴 데드 존에 있다고 표현하며 엔진에서는 초기화와 바인딩 리스트라는 메커니즘으로 사용함.

- const 변수
값을 바꿀 수 없는 변수 선언.
JS에서는 상수는 대문자 사용이 관례이며 const라도 배열이나 객체는 값이 변경되므로 정말 상수인 경우 대소문자를 구분해서 쓰는 게 좋다.
Object의 프로퍼티 값을 바꾸거나 배열의 엘리먼트 값을 바꿀 순 있다.

- 화살표 함수
일반함수의 축약 형태이지만 고려할 사항이 있음 (this 참조).
=> 화살표 앞에서 줄을 분리하면 신택스 에러, 뒤에서는 가능.
return을 작성하지 않으면 undefined를 반환(이건 ES3문법임).
=>({key:value}); 와 같이 오브젝트 형을 소괄호로 감싸면 오브젝트를 반환함. 아니면 undefined
매개변수가 1개고 리턴 한줄만 필요한 경우 극도의 축약이 가능.

- 화살표 함수 구조
일반함수 : 프로토타입과 콘스트럭터 존재.
화살표함수 : 프로토타입과 콘스트럭터가 없음.
프로토타입이 없다 -> 프로토타입에 메소드를 연결하여 확장할 수 없음. 
콘스트럭터가 없다 -> new 연산자로 인스턴스를 생성할 수 없다.
*그만큼 가볍고 단독으로 써야함.

arguments 사용 불가 : 일반 함수에서는 함수선언 시 매개변수를 기입하지 않으면 아큐먼츠를 사용하여 전달이 가능하지만
화살표 함수는 불가능함. 구조엔 있지만 사용할 순 없다. 대신 파라미터가 유동적일 때 rest 파라미터를 쓰면 됨.

- 화살표 함수와 this
strict 모드에선 함수 앞에 선언된 오브젝트를 붙여야함. -> 함수선언식이면 window.함수()로 사용해야 this 참조가 가능함.
또한 함수가 복잡해져서 함수내에서 함수를 호출할땐 window를 붙일 수 없으므로 this를 참조하기 위해선 this를 별도로 저장한 후 사용 했어야 했음.

화살표 함수 안에서의 this는 window 글로벌 오브젝트를 참조하게 됨.
화살표 함수에서는 정적 스코프(렉시컬 스코프)의 this를 사용.
정적 스코프 : 엔진이 해석할 때, 화살표 함수를 만나면 function 오브젝트를 생성하고 화살표 함수가 속한 스코프를 해당 오브젝트에 바인딩.
                 오브젝트에 바인딩 된 스코프의 this를 화살표 함수에서 this로 사용.

- 화살표 함수와 인스턴스
인스턴스에서 화살표 함수의 작성 위치에 따라 this가 참조하는 오브젝트가 다름.

1.프로토타입에 메소드로 작성 : 글로벌 오브젝트(window)를 참조.
2.프로토타입에 메소드 안에 작성 : 프로토타입의 인스턴스를 참조.

- 이터레이션
이터레이션은 프로토콜이 필요하다 (통신 규약), 즉 이터레이션은 프로토콜을 갖고 있다.
이터레이션 프로토콜 : 
1. 오브젝트가 이터레이션 할 수 있는 구조여야 한다.
2. 이터레이션 함수를 갖고 있어야 한다.
3. 이터레이션 프로토콜 구분 : 이터러블 프로토콜(만들기), 이터레이터 프로토콜(실행).

- 이터러블 오브젝트
이터러블 프로토콜 : 오브젝트가 반복할 수 있는 구조여야 하며, Symbol.iterator를 가지고 있어야 함.
Symbol.iterator를 지닌 자료형 : Array, Argument, String, TypedArray, Map, Set, DOM NodeList

이터러블 오브젝트 : 이터러블 프로토콜을 갖고 있는 오브젝트, 반복 구조, Symbol.iterator() 함수를 가지고 있음.
*Object는 이터러블 오브젝트가 아님. 프로토타입에 Symbol.iterator이 있어야함.
*이터러블 오브젝트를 상속받아도 가능은 함.
*Symbol.iterator로 생성한 오브젝트를 이터레이터 오브젝트 or 이터레이터라고 부름
이터레이터의 특징 : {value: "element" or undefined, done: true or false }; 형태임 끝일 경우 undefined와 true.

- spread
spread : 괄호 안에 ... 작성하고 이어서 이터러블 오브젝트 작성. key:value도 전개 가능.
Array Spread : 대상 배열을 작성한 위치에 전개. 값이 대체 되지 않고 전개되어서 추가함.
String Spread : 대상 문자열을 문자 단위로 전개하여 배열화.
Object Spread : 대상 Object를 작성한 위치에 프로퍼티 단위로 전개. key가 같으면 전개가 아닌 대체함.
push(...spread) : 배열을 단순히 push하면 2차원 배열이됨. 전개하여 푸쉬하면 1차원 배열 유지. ..."abc" 라면 a,b,c로 들어감.

- function spread
파라미터 배열을 엘리먼트 단위로 전개하여 파라미터에 매칭시켜 보냄.
rest 파라미터 : spread=분리, rest=결합.  function(...param) 형태로 작성.
파라미터와 rest 파라미터 혼합 사용 : function(param, ...rest) 형태로 작성. func(...values)를 날리면 values[0]이 param으로 나머진 rest로 매핑.
Array-like : Object 타입. Array는 아니지만 배열처럼 이터러블 오브젝트. for(let i=0; i<values.length; i++) 식으로 for문 작성.
Array-like 작성방법 : 프로퍼티 key 값을 0부터 1씩 증가하면서 작성. length에 전체 수를 작성.

- rest와 arguments 차이
argument 오브젝트 : 파라미터 작성에 관계 없이 전체가 설정됨. Array-like 형태. Array 메소드를 사용할 수 없음. __proto__가 Object
rest 파라미터 : 매핑되지 않은 나머지 파라미터만 설정. Array 오브젝트 형태이므로 메소드 사용가능. __proto__가 array

- 분할 할당(Destructring)
사전적 의미 : ~구조를 파괴하다, 그러나 원본이 변경되지 않으므로 분할하여 할당하는 것에 가까움.
let a,b,c;
const list = [1,2,3];
[a, b, c] = list; // a=1, b=2, c=3

Array 분할 할당 : 순서대로 index대로 매핑.
(1)할당받은 변수가 적을 경우 : [a, b] = [1, 2, 3]; // 에러없이 a와 b만 매핑 
(2)할당받을 변수가 많을 경우 : [a, b, c, d] = [1, 2, 3] // 에러없이 c까지 매핑 d는 undefined
(3)배열 차원에 맞추어 분할 할당 : [a, b, [c, d]] = [1, 2, [3, 4]]; // [1, 2, 3, 4]로 차원 변환.
(4)인덱스에 변수가 없을 때 : [a, , , d] = [1, 2, 3, 4] // [1, undefined, undefined, 4] 할당.
(5)나머지를 전부 할당 : [a, ...rest] = [1, 2, 3, 4] // a= 1, rest = [2,3,4]
(6)인덱스를 반영한 나머지 할당 : [a, , c, ...rest] = [1, 2, 3, 4, 5]; //a=1, c=3, rest = [4,5]

Object 분할 할당 : Object의 프로퍼티를 분할하여 할당.
(1)프로퍼티 값 할당 : const {one, two} = {one: 10, two: 20}; // one = 10, two = 20
(2)프로퍼티를 별도로 작성 : let a, b; ({a, b} = {a:10, b:20}); //변수로 선언한 값에 할당하는 경우 소괄호안에 작성.
(3)값(value) 위치에 변수 이름 작성 : let a, b; ({one: a, two : b} = {a:10, b:20}); // a, b에 10, 20이 뜨지만 one, two는 레퍼런스 에러.
(4)Object 구조에 맞춰 할당 : const {a, b : {c,d}} = {a:10, b:{c:20, d:30}} // a=10, c= 20, d=30, b는 레퍼런스 에러. b는 구조를 위한 프로퍼티.
(5)나머지를 Object로 할당 : const {a, ...rest} = {a: 10, b: 20, c: 30} // a= 10, rest = {b: 20, c: 30} 나머지는 Object 형태로 할당.

파라미터 분할 할당 : 호출하는 함수에서 Object로 넘겨준 파라미터 값을 분할 할당.
(1)파라미터 값 할당 : let add = ({a, b})=>a+b , add({a:10, b:29}) // 30
(2)Object 구조에 맞추어 할당 : let add = ({a, b:{c}})=>a+c , add({a:10, b:{c:29}}); // 30

Object 오퍼레이션
같은 프로퍼티 이름을 사용 : const value = {book: 10, book: 20}; 
ES5의 strict 모드에선 위와 같은 경우 에러, ES6는 strict와 상관없이 뒤의 값인 {book:20}만 남음.
Shorthand property names : const one = 10, two = 20; const values = {one, two}; // values ={one:10, two:20}

문자열을 프로퍼티 이름으로 사용 : const a = {["a"+"b"]: 12}; // ab : 12

변수 값을 프로퍼티 이름으로 사용 :
const item = "world";
const sports = {
 [item] : 100, //변수값을 프로퍼티 이름으로 사용
 [item + " Cup"] : "월드컵", //변수값과 문자열을 연결 가능하며 공백도 넣을 수 있음.
 [item + "Sports"] : function(){ return "스포츠";} //변수값에 따라 이름을 정의한 함수로 호출 할 수 있음.
};
스크립트 언어의 유연성과 확장성을 확보할 수 있음. 코드가 깔끔해짐.

분할 할당을 조합한 형태 : 
const item = "book";
const result = {[item] : title} = {book : "책"}; // result = {book: 책}; 가변적으로 사용함.

let funcNames = ['a','b','c'];  
const funcFactory = funcNames.reduce((pre,ele)=>{
  return Object.assign(pre,{ [ele] : ()=>console.log(`hello, ${ele}!`)});
},{});
console.log(funcFactory);

default value
값을 할당하지 않으면 사전에 정의된 값을 할당.
(1) const [a, b, c=3] = [1, 2]; // c=3. 할당되지 않았지만 3이 유지됨.
(2) const [a, b, c=3] = [1, 2, 4]; // c=4. 할당할 값이 있다면 디폴트 값은 무시됨.
(3) const [a, b=a+1, c=b+1] = [10]; // a=10, b=11, c= 12. 왼쪽에서 오른쪽으로 적용.
(4) undefined도 값이지만 넘겨주지 않은 것과 같으므로 default value를 유지함.


